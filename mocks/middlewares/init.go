// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package middlewares is a generated GoMock package.
package middlewares

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockMiddlewares is a mock of Middlewares interface.
type MockMiddlewares struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewaresMockRecorder
}

// MockMiddlewaresMockRecorder is the mock recorder for MockMiddlewares.
type MockMiddlewaresMockRecorder struct {
	mock *MockMiddlewares
}

// NewMockMiddlewares creates a new mock instance.
func NewMockMiddlewares(ctrl *gomock.Controller) *MockMiddlewares {
	mock := &MockMiddlewares{ctrl: ctrl}
	mock.recorder = &MockMiddlewaresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddlewares) EXPECT() *MockMiddlewaresMockRecorder {
	return m.recorder
}

// ImplementCors mocks base method.
func (m *MockMiddlewares) ImplementCors() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImplementCors")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// ImplementCors indicates an expected call of ImplementCors.
func (mr *MockMiddlewaresMockRecorder) ImplementCors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImplementCors", reflect.TypeOf((*MockMiddlewares)(nil).ImplementCors))
}

// PanicRecover mocks base method.
func (m *MockMiddlewares) PanicRecover() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PanicRecover")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// PanicRecover indicates an expected call of PanicRecover.
func (mr *MockMiddlewaresMockRecorder) PanicRecover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PanicRecover", reflect.TypeOf((*MockMiddlewares)(nil).PanicRecover))
}

// VerifyAuth mocks base method.
func (m *MockMiddlewares) VerifyAuth() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuth")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// VerifyAuth indicates an expected call of VerifyAuth.
func (mr *MockMiddlewaresMockRecorder) VerifyAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuth", reflect.TypeOf((*MockMiddlewares)(nil).VerifyAuth))
}
