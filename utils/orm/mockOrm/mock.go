// Code generated by MockGen. DO NOT EDIT.
// Source: orm.go

// Package mockOrm is a generated GoMock package.
package mockOrm

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	orm "github.com/naufalfmm/dayatani-farmer-api/utils/orm"
	schema "github.com/uptrace/bun/schema"
)

// MockQueryAppender is a mock of QueryAppender interface.
type MockQueryAppender struct {
	ctrl     *gomock.Controller
	recorder *MockQueryAppenderMockRecorder
}

// MockQueryAppenderMockRecorder is the mock recorder for MockQueryAppender.
type MockQueryAppenderMockRecorder struct {
	mock *MockQueryAppender
}

// NewMockQueryAppender creates a new mock instance.
func NewMockQueryAppender(ctrl *gomock.Controller) *MockQueryAppender {
	mock := &MockQueryAppender{ctrl: ctrl}
	mock.recorder = &MockQueryAppenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryAppender) EXPECT() *MockQueryAppenderMockRecorder {
	return m.recorder
}

// AppendQuery mocks base method.
func (m *MockQueryAppender) AppendQuery(fmter schema.Formatter, b []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendQuery", fmter, b)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendQuery indicates an expected call of AppendQuery.
func (mr *MockQueryAppenderMockRecorder) AppendQuery(fmter, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendQuery", reflect.TypeOf((*MockQueryAppender)(nil).AppendQuery), fmter, b)
}

// MockSelect is a mock of Select interface.
type MockSelect struct {
	ctrl     *gomock.Controller
	recorder *MockSelectMockRecorder
}

// MockSelectMockRecorder is the mock recorder for MockSelect.
type MockSelectMockRecorder struct {
	mock *MockSelect
}

// NewMockSelect creates a new mock instance.
func NewMockSelect(ctrl *gomock.Controller) *MockSelect {
	mock := &MockSelect{ctrl: ctrl}
	mock.recorder = &MockSelectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelect) EXPECT() *MockSelectMockRecorder {
	return m.recorder
}

// AppendQuery mocks base method.
func (m *MockSelect) AppendQuery(fmter schema.Formatter, b []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendQuery", fmter, b)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendQuery indicates an expected call of AppendQuery.
func (mr *MockSelectMockRecorder) AppendQuery(fmter, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendQuery", reflect.TypeOf((*MockSelect)(nil).AppendQuery), fmter, b)
}

// Column mocks base method.
func (m *MockSelect) Column(columns ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Column", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Column indicates an expected call of Column.
func (mr *MockSelectMockRecorder) Column(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Column", reflect.TypeOf((*MockSelect)(nil).Column), columns...)
}

// ColumnExpr mocks base method.
func (m *MockSelect) ColumnExpr(query string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ColumnExpr", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// ColumnExpr indicates an expected call of ColumnExpr.
func (mr *MockSelectMockRecorder) ColumnExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnExpr", reflect.TypeOf((*MockSelect)(nil).ColumnExpr), varargs...)
}

// Count mocks base method.
func (m *MockSelect) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSelectMockRecorder) Count(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSelect)(nil).Count), ctx)
}

// ExcludeColumn mocks base method.
func (m *MockSelect) ExcludeColumn(columns ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExcludeColumn", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// ExcludeColumn indicates an expected call of ExcludeColumn.
func (mr *MockSelectMockRecorder) ExcludeColumn(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludeColumn", reflect.TypeOf((*MockSelect)(nil).ExcludeColumn), columns...)
}

// Exec mocks base method.
func (m *MockSelect) Exec(ctx context.Context, dest ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockSelectMockRecorder) Exec(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSelect)(nil).Exec), varargs...)
}

// For mocks base method.
func (m *MockSelect) For(s string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{s}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "For", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// For indicates an expected call of For.
func (mr *MockSelectMockRecorder) For(s interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{s}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "For", reflect.TypeOf((*MockSelect)(nil).For), varargs...)
}

// Group mocks base method.
func (m *MockSelect) Group(columns ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Group", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockSelectMockRecorder) Group(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockSelect)(nil).Group), columns...)
}

// GroupExpr mocks base method.
func (m *MockSelect) GroupExpr(group string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{group}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupExpr", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// GroupExpr indicates an expected call of GroupExpr.
func (mr *MockSelectMockRecorder) GroupExpr(group interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{group}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupExpr", reflect.TypeOf((*MockSelect)(nil).GroupExpr), varargs...)
}

// Having mocks base method.
func (m *MockSelect) Having(having string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{having}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockSelectMockRecorder) Having(having interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{having}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockSelect)(nil).Having), varargs...)
}

// Join mocks base method.
func (m *MockSelect) Join(join string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{join}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockSelectMockRecorder) Join(join interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{join}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockSelect)(nil).Join), varargs...)
}

// JoinOn mocks base method.
func (m *MockSelect) JoinOn(cond string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{cond}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinOn", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// JoinOn indicates an expected call of JoinOn.
func (mr *MockSelectMockRecorder) JoinOn(cond interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{cond}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinOn", reflect.TypeOf((*MockSelect)(nil).JoinOn), varargs...)
}

// JoinOnOr mocks base method.
func (m *MockSelect) JoinOnOr(cond string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{cond}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinOnOr", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// JoinOnOr indicates an expected call of JoinOnOr.
func (mr *MockSelectMockRecorder) JoinOnOr(cond interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{cond}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinOnOr", reflect.TypeOf((*MockSelect)(nil).JoinOnOr), varargs...)
}

// Limit mocks base method.
func (m *MockSelect) Limit(n int) orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", n)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockSelectMockRecorder) Limit(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockSelect)(nil).Limit), n)
}

// Model mocks base method.
func (m *MockSelect) Model(model interface{}) orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", model)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockSelectMockRecorder) Model(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockSelect)(nil).Model), model)
}

// ModelTableExpr mocks base method.
func (m *MockSelect) ModelTableExpr(query string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelTableExpr", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// ModelTableExpr indicates an expected call of ModelTableExpr.
func (mr *MockSelectMockRecorder) ModelTableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTableExpr", reflect.TypeOf((*MockSelect)(nil).ModelTableExpr), varargs...)
}

// Offset mocks base method.
func (m *MockSelect) Offset(n int) orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", n)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockSelectMockRecorder) Offset(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockSelect)(nil).Offset), n)
}

// Order mocks base method.
func (m *MockSelect) Order(orders ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range orders {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Order", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockSelectMockRecorder) Order(orders ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockSelect)(nil).Order), orders...)
}

// OrderExpr mocks base method.
func (m *MockSelect) OrderExpr(query string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderExpr", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// OrderExpr indicates an expected call of OrderExpr.
func (mr *MockSelectMockRecorder) OrderExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderExpr", reflect.TypeOf((*MockSelect)(nil).OrderExpr), varargs...)
}

// Relation mocks base method.
func (m *MockSelect) Relation(name string, apply ...func(orm.Select) orm.Select) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range apply {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Relation", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Relation indicates an expected call of Relation.
func (mr *MockSelectMockRecorder) Relation(name interface{}, apply ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, apply...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockSelect)(nil).Relation), varargs...)
}

// Scan mocks base method.
func (m *MockSelect) Scan(ctx context.Context, dest ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockSelectMockRecorder) Scan(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockSelect)(nil).Scan), varargs...)
}

// ScanAndCount mocks base method.
func (m *MockSelect) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanAndCount", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanAndCount indicates an expected call of ScanAndCount.
func (mr *MockSelectMockRecorder) ScanAndCount(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanAndCount", reflect.TypeOf((*MockSelect)(nil).ScanAndCount), varargs...)
}

// Table mocks base method.
func (m *MockSelect) Table(tables ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tables {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockSelectMockRecorder) Table(tables ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockSelect)(nil).Table), tables...)
}

// TableExpr mocks base method.
func (m *MockSelect) TableExpr(query string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableExpr", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// TableExpr indicates an expected call of TableExpr.
func (mr *MockSelectMockRecorder) TableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableExpr", reflect.TypeOf((*MockSelect)(nil).TableExpr), varargs...)
}

// Union mocks base method.
func (m *MockSelect) Union(other orm.Select) orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", other)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockSelectMockRecorder) Union(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockSelect)(nil).Union), other)
}

// UnionAll mocks base method.
func (m *MockSelect) UnionAll(other orm.Select) orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnionAll", other)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// UnionAll indicates an expected call of UnionAll.
func (mr *MockSelectMockRecorder) UnionAll(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnionAll", reflect.TypeOf((*MockSelect)(nil).UnionAll), other)
}

// UseIndex mocks base method.
func (m *MockSelect) UseIndex(indexes ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range indexes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseIndex", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// UseIndex indicates an expected call of UseIndex.
func (mr *MockSelectMockRecorder) UseIndex(indexes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseIndex", reflect.TypeOf((*MockSelect)(nil).UseIndex), indexes...)
}

// UseIndexForGroupBy mocks base method.
func (m *MockSelect) UseIndexForGroupBy(indexes ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range indexes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseIndexForGroupBy", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// UseIndexForGroupBy indicates an expected call of UseIndexForGroupBy.
func (mr *MockSelectMockRecorder) UseIndexForGroupBy(indexes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseIndexForGroupBy", reflect.TypeOf((*MockSelect)(nil).UseIndexForGroupBy), indexes...)
}

// UseIndexForJoin mocks base method.
func (m *MockSelect) UseIndexForJoin(indexes ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range indexes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseIndexForJoin", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// UseIndexForJoin indicates an expected call of UseIndexForJoin.
func (mr *MockSelectMockRecorder) UseIndexForJoin(indexes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseIndexForJoin", reflect.TypeOf((*MockSelect)(nil).UseIndexForJoin), indexes...)
}

// UseIndexForOrderBy mocks base method.
func (m *MockSelect) UseIndexForOrderBy(indexes ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range indexes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseIndexForOrderBy", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// UseIndexForOrderBy indicates an expected call of UseIndexForOrderBy.
func (mr *MockSelectMockRecorder) UseIndexForOrderBy(indexes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseIndexForOrderBy", reflect.TypeOf((*MockSelect)(nil).UseIndexForOrderBy), indexes...)
}

// Where mocks base method.
func (m *MockSelect) Where(query string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockSelectMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockSelect)(nil).Where), varargs...)
}

// WhereAllWithDeleted mocks base method.
func (m *MockSelect) WhereAllWithDeleted() orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereAllWithDeleted")
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// WhereAllWithDeleted indicates an expected call of WhereAllWithDeleted.
func (mr *MockSelectMockRecorder) WhereAllWithDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAllWithDeleted", reflect.TypeOf((*MockSelect)(nil).WhereAllWithDeleted))
}

// WhereDeleted mocks base method.
func (m *MockSelect) WhereDeleted() orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereDeleted")
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// WhereDeleted indicates an expected call of WhereDeleted.
func (mr *MockSelectMockRecorder) WhereDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereDeleted", reflect.TypeOf((*MockSelect)(nil).WhereDeleted))
}

// WhereGroup mocks base method.
func (m *MockSelect) WhereGroup(sep string, fn func(orm.Select) orm.Select) orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereGroup", sep, fn)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// WhereGroup indicates an expected call of WhereGroup.
func (mr *MockSelectMockRecorder) WhereGroup(sep, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereGroup", reflect.TypeOf((*MockSelect)(nil).WhereGroup), sep, fn)
}

// WhereOr mocks base method.
func (m *MockSelect) WhereOr(query string, args ...interface{}) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhereOr", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// WhereOr indicates an expected call of WhereOr.
func (mr *MockSelectMockRecorder) WhereOr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereOr", reflect.TypeOf((*MockSelect)(nil).WhereOr), varargs...)
}

// WherePK mocks base method.
func (m *MockSelect) WherePK(cols ...string) orm.Select {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WherePK", varargs...)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// WherePK indicates an expected call of WherePK.
func (mr *MockSelectMockRecorder) WherePK(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WherePK", reflect.TypeOf((*MockSelect)(nil).WherePK), cols...)
}

// With mocks base method.
func (m *MockSelect) With(name string, query orm.QueryAppender) orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", name, query)
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockSelectMockRecorder) With(name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockSelect)(nil).With), name, query)
}

// MockValues is a mock of Values interface.
type MockValues struct {
	ctrl     *gomock.Controller
	recorder *MockValuesMockRecorder
}

// MockValuesMockRecorder is the mock recorder for MockValues.
type MockValuesMockRecorder struct {
	mock *MockValues
}

// NewMockValues creates a new mock instance.
func NewMockValues(ctrl *gomock.Controller) *MockValues {
	mock := &MockValues{ctrl: ctrl}
	mock.recorder = &MockValuesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValues) EXPECT() *MockValuesMockRecorder {
	return m.recorder
}

// AppendQuery mocks base method.
func (m *MockValues) AppendQuery(fmter schema.Formatter, b []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendQuery", fmter, b)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendQuery indicates an expected call of AppendQuery.
func (mr *MockValuesMockRecorder) AppendQuery(fmter, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendQuery", reflect.TypeOf((*MockValues)(nil).AppendQuery), fmter, b)
}

// Column mocks base method.
func (m *MockValues) Column(columns ...string) orm.Values {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Column", varargs...)
	ret0, _ := ret[0].(orm.Values)
	return ret0
}

// Column indicates an expected call of Column.
func (mr *MockValuesMockRecorder) Column(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Column", reflect.TypeOf((*MockValues)(nil).Column), columns...)
}

// Value mocks base method.
func (m *MockValues) Value(column, expr string, args ...interface{}) orm.Values {
	m.ctrl.T.Helper()
	varargs := []interface{}{column, expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Value", varargs...)
	ret0, _ := ret[0].(orm.Values)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockValuesMockRecorder) Value(column, expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{column, expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockValues)(nil).Value), varargs...)
}

// WithOrder mocks base method.
func (m *MockValues) WithOrder() orm.Values {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOrder")
	ret0, _ := ret[0].(orm.Values)
	return ret0
}

// WithOrder indicates an expected call of WithOrder.
func (mr *MockValuesMockRecorder) WithOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOrder", reflect.TypeOf((*MockValues)(nil).WithOrder))
}

// MockInsert is a mock of Insert interface.
type MockInsert struct {
	ctrl     *gomock.Controller
	recorder *MockInsertMockRecorder
}

// MockInsertMockRecorder is the mock recorder for MockInsert.
type MockInsertMockRecorder struct {
	mock *MockInsert
}

// NewMockInsert creates a new mock instance.
func NewMockInsert(ctrl *gomock.Controller) *MockInsert {
	mock := &MockInsert{ctrl: ctrl}
	mock.recorder = &MockInsertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsert) EXPECT() *MockInsertMockRecorder {
	return m.recorder
}

// Column mocks base method.
func (m *MockInsert) Column(columns ...string) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Column", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// Column indicates an expected call of Column.
func (mr *MockInsertMockRecorder) Column(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Column", reflect.TypeOf((*MockInsert)(nil).Column), columns...)
}

// ExcludeColumn mocks base method.
func (m *MockInsert) ExcludeColumn(columns ...string) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExcludeColumn", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// ExcludeColumn indicates an expected call of ExcludeColumn.
func (mr *MockInsertMockRecorder) ExcludeColumn(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludeColumn", reflect.TypeOf((*MockInsert)(nil).ExcludeColumn), columns...)
}

// Exec mocks base method.
func (m *MockInsert) Exec(ctx context.Context, dest ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockInsertMockRecorder) Exec(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockInsert)(nil).Exec), varargs...)
}

// Ignore mocks base method.
func (m *MockInsert) Ignore() orm.Insert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ignore")
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// Ignore indicates an expected call of Ignore.
func (mr *MockInsertMockRecorder) Ignore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ignore", reflect.TypeOf((*MockInsert)(nil).Ignore))
}

// Model mocks base method.
func (m *MockInsert) Model(model interface{}) orm.Insert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", model)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockInsertMockRecorder) Model(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockInsert)(nil).Model), model)
}

// ModelTableExpr mocks base method.
func (m *MockInsert) ModelTableExpr(query string, args ...interface{}) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelTableExpr", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// ModelTableExpr indicates an expected call of ModelTableExpr.
func (mr *MockInsertMockRecorder) ModelTableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTableExpr", reflect.TypeOf((*MockInsert)(nil).ModelTableExpr), varargs...)
}

// On mocks base method.
func (m *MockInsert) On(s string, args ...interface{}) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{s}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "On", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// On indicates an expected call of On.
func (mr *MockInsertMockRecorder) On(s interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{s}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "On", reflect.TypeOf((*MockInsert)(nil).On), varargs...)
}

// Returning mocks base method.
func (m *MockInsert) Returning(query string, args ...interface{}) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returning", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// Returning indicates an expected call of Returning.
func (mr *MockInsertMockRecorder) Returning(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returning", reflect.TypeOf((*MockInsert)(nil).Returning), varargs...)
}

// Set mocks base method.
func (m *MockInsert) Set(query string, args ...interface{}) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockInsertMockRecorder) Set(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockInsert)(nil).Set), varargs...)
}

// Table mocks base method.
func (m *MockInsert) Table(tables ...string) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tables {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockInsertMockRecorder) Table(tables ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockInsert)(nil).Table), tables...)
}

// TableExpr mocks base method.
func (m *MockInsert) TableExpr(query string, args ...interface{}) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableExpr", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// TableExpr indicates an expected call of TableExpr.
func (mr *MockInsertMockRecorder) TableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableExpr", reflect.TypeOf((*MockInsert)(nil).TableExpr), varargs...)
}

// Value mocks base method.
func (m *MockInsert) Value(column, expr string, args ...interface{}) orm.Insert {
	m.ctrl.T.Helper()
	varargs := []interface{}{column, expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Value", varargs...)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockInsertMockRecorder) Value(column, expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{column, expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockInsert)(nil).Value), varargs...)
}

// With mocks base method.
func (m *MockInsert) With(name string, query orm.QueryAppender) orm.Insert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", name, query)
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockInsertMockRecorder) With(name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockInsert)(nil).With), name, query)
}

// MockUpdate is a mock of Update interface.
type MockUpdate struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateMockRecorder
}

// MockUpdateMockRecorder is the mock recorder for MockUpdate.
type MockUpdateMockRecorder struct {
	mock *MockUpdate
}

// NewMockUpdate creates a new mock instance.
func NewMockUpdate(ctrl *gomock.Controller) *MockUpdate {
	mock := &MockUpdate{ctrl: ctrl}
	mock.recorder = &MockUpdateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdate) EXPECT() *MockUpdateMockRecorder {
	return m.recorder
}

// Bulk mocks base method.
func (m *MockUpdate) Bulk() orm.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bulk")
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// Bulk indicates an expected call of Bulk.
func (mr *MockUpdateMockRecorder) Bulk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bulk", reflect.TypeOf((*MockUpdate)(nil).Bulk))
}

// Column mocks base method.
func (m *MockUpdate) Column(columns ...string) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Column", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// Column indicates an expected call of Column.
func (mr *MockUpdateMockRecorder) Column(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Column", reflect.TypeOf((*MockUpdate)(nil).Column), columns...)
}

// ExcludeColumn mocks base method.
func (m *MockUpdate) ExcludeColumn(columns ...string) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExcludeColumn", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// ExcludeColumn indicates an expected call of ExcludeColumn.
func (mr *MockUpdateMockRecorder) ExcludeColumn(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludeColumn", reflect.TypeOf((*MockUpdate)(nil).ExcludeColumn), columns...)
}

// Exec mocks base method.
func (m *MockUpdate) Exec(ctx context.Context, dest ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockUpdateMockRecorder) Exec(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockUpdate)(nil).Exec), varargs...)
}

// Model mocks base method.
func (m *MockUpdate) Model(model interface{}) orm.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", model)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockUpdateMockRecorder) Model(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockUpdate)(nil).Model), model)
}

// ModelTableExpr mocks base method.
func (m *MockUpdate) ModelTableExpr(query string, args ...interface{}) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelTableExpr", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// ModelTableExpr indicates an expected call of ModelTableExpr.
func (mr *MockUpdateMockRecorder) ModelTableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTableExpr", reflect.TypeOf((*MockUpdate)(nil).ModelTableExpr), varargs...)
}

// OmitZero mocks base method.
func (m *MockUpdate) OmitZero() orm.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OmitZero")
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// OmitZero indicates an expected call of OmitZero.
func (mr *MockUpdateMockRecorder) OmitZero() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OmitZero", reflect.TypeOf((*MockUpdate)(nil).OmitZero))
}

// Returning mocks base method.
func (m *MockUpdate) Returning(query string, args ...interface{}) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returning", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// Returning indicates an expected call of Returning.
func (mr *MockUpdateMockRecorder) Returning(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returning", reflect.TypeOf((*MockUpdate)(nil).Returning), varargs...)
}

// Set mocks base method.
func (m *MockUpdate) Set(query string, args ...interface{}) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockUpdateMockRecorder) Set(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUpdate)(nil).Set), varargs...)
}

// SetColumn mocks base method.
func (m *MockUpdate) SetColumn(column, query string, args ...interface{}) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{column, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetColumn", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// SetColumn indicates an expected call of SetColumn.
func (mr *MockUpdateMockRecorder) SetColumn(column, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{column, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColumn", reflect.TypeOf((*MockUpdate)(nil).SetColumn), varargs...)
}

// Table mocks base method.
func (m *MockUpdate) Table(tables ...string) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tables {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockUpdateMockRecorder) Table(tables ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockUpdate)(nil).Table), tables...)
}

// TableExpr mocks base method.
func (m *MockUpdate) TableExpr(query string, args ...interface{}) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableExpr", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// TableExpr indicates an expected call of TableExpr.
func (mr *MockUpdateMockRecorder) TableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableExpr", reflect.TypeOf((*MockUpdate)(nil).TableExpr), varargs...)
}

// Value mocks base method.
func (m *MockUpdate) Value(column, query string, args ...interface{}) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{column, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Value", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockUpdateMockRecorder) Value(column, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{column, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockUpdate)(nil).Value), varargs...)
}

// Where mocks base method.
func (m *MockUpdate) Where(query string, args ...interface{}) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockUpdateMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockUpdate)(nil).Where), varargs...)
}

// WhereAllWithDeleted mocks base method.
func (m *MockUpdate) WhereAllWithDeleted() orm.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereAllWithDeleted")
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// WhereAllWithDeleted indicates an expected call of WhereAllWithDeleted.
func (mr *MockUpdateMockRecorder) WhereAllWithDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAllWithDeleted", reflect.TypeOf((*MockUpdate)(nil).WhereAllWithDeleted))
}

// WhereDeleted mocks base method.
func (m *MockUpdate) WhereDeleted() orm.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereDeleted")
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// WhereDeleted indicates an expected call of WhereDeleted.
func (mr *MockUpdateMockRecorder) WhereDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereDeleted", reflect.TypeOf((*MockUpdate)(nil).WhereDeleted))
}

// WhereGroup mocks base method.
func (m *MockUpdate) WhereGroup(sep string, fn func(orm.Update) orm.Update) orm.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereGroup", sep, fn)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// WhereGroup indicates an expected call of WhereGroup.
func (mr *MockUpdateMockRecorder) WhereGroup(sep, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereGroup", reflect.TypeOf((*MockUpdate)(nil).WhereGroup), sep, fn)
}

// WhereOr mocks base method.
func (m *MockUpdate) WhereOr(query string, args ...interface{}) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhereOr", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// WhereOr indicates an expected call of WhereOr.
func (mr *MockUpdateMockRecorder) WhereOr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereOr", reflect.TypeOf((*MockUpdate)(nil).WhereOr), varargs...)
}

// WherePK mocks base method.
func (m *MockUpdate) WherePK(cols ...string) orm.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WherePK", varargs...)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// WherePK indicates an expected call of WherePK.
func (mr *MockUpdateMockRecorder) WherePK(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WherePK", reflect.TypeOf((*MockUpdate)(nil).WherePK), cols...)
}

// With mocks base method.
func (m *MockUpdate) With(name string, query schema.QueryAppender) orm.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", name, query)
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockUpdateMockRecorder) With(name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockUpdate)(nil).With), name, query)
}

// MockDelete is a mock of Delete interface.
type MockDelete struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteMockRecorder
}

// MockDeleteMockRecorder is the mock recorder for MockDelete.
type MockDeleteMockRecorder struct {
	mock *MockDelete
}

// NewMockDelete creates a new mock instance.
func NewMockDelete(ctrl *gomock.Controller) *MockDelete {
	mock := &MockDelete{ctrl: ctrl}
	mock.recorder = &MockDeleteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelete) EXPECT() *MockDeleteMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockDelete) Exec(ctx context.Context, dest ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDeleteMockRecorder) Exec(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDelete)(nil).Exec), varargs...)
}

// ForceDelete mocks base method.
func (m *MockDelete) ForceDelete() orm.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceDelete")
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// ForceDelete indicates an expected call of ForceDelete.
func (mr *MockDeleteMockRecorder) ForceDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDelete", reflect.TypeOf((*MockDelete)(nil).ForceDelete))
}

// Model mocks base method.
func (m *MockDelete) Model(model interface{}) orm.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", model)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDeleteMockRecorder) Model(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDelete)(nil).Model), model)
}

// ModelTableExpr mocks base method.
func (m *MockDelete) ModelTableExpr(query string, args ...interface{}) orm.Delete {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelTableExpr", varargs...)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// ModelTableExpr indicates an expected call of ModelTableExpr.
func (mr *MockDeleteMockRecorder) ModelTableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTableExpr", reflect.TypeOf((*MockDelete)(nil).ModelTableExpr), varargs...)
}

// Returning mocks base method.
func (m *MockDelete) Returning(query string, args ...interface{}) orm.Delete {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returning", varargs...)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// Returning indicates an expected call of Returning.
func (mr *MockDeleteMockRecorder) Returning(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returning", reflect.TypeOf((*MockDelete)(nil).Returning), varargs...)
}

// Table mocks base method.
func (m *MockDelete) Table(tables ...string) orm.Delete {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tables {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockDeleteMockRecorder) Table(tables ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockDelete)(nil).Table), tables...)
}

// TableExpr mocks base method.
func (m *MockDelete) TableExpr(query string, args ...interface{}) orm.Delete {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableExpr", varargs...)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// TableExpr indicates an expected call of TableExpr.
func (mr *MockDeleteMockRecorder) TableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableExpr", reflect.TypeOf((*MockDelete)(nil).TableExpr), varargs...)
}

// Where mocks base method.
func (m *MockDelete) Where(query string, args ...interface{}) orm.Delete {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockDeleteMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockDelete)(nil).Where), varargs...)
}

// WhereAllWithDeleted mocks base method.
func (m *MockDelete) WhereAllWithDeleted() orm.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereAllWithDeleted")
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// WhereAllWithDeleted indicates an expected call of WhereAllWithDeleted.
func (mr *MockDeleteMockRecorder) WhereAllWithDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAllWithDeleted", reflect.TypeOf((*MockDelete)(nil).WhereAllWithDeleted))
}

// WhereDeleted mocks base method.
func (m *MockDelete) WhereDeleted() orm.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereDeleted")
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// WhereDeleted indicates an expected call of WhereDeleted.
func (mr *MockDeleteMockRecorder) WhereDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereDeleted", reflect.TypeOf((*MockDelete)(nil).WhereDeleted))
}

// WhereGroup mocks base method.
func (m *MockDelete) WhereGroup(sep string, fn func(orm.Delete) orm.Delete) orm.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereGroup", sep, fn)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// WhereGroup indicates an expected call of WhereGroup.
func (mr *MockDeleteMockRecorder) WhereGroup(sep, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereGroup", reflect.TypeOf((*MockDelete)(nil).WhereGroup), sep, fn)
}

// WhereOr mocks base method.
func (m *MockDelete) WhereOr(query string, args ...interface{}) orm.Delete {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhereOr", varargs...)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// WhereOr indicates an expected call of WhereOr.
func (mr *MockDeleteMockRecorder) WhereOr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereOr", reflect.TypeOf((*MockDelete)(nil).WhereOr), varargs...)
}

// WherePK mocks base method.
func (m *MockDelete) WherePK(cols ...string) orm.Delete {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WherePK", varargs...)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// WherePK indicates an expected call of WherePK.
func (mr *MockDeleteMockRecorder) WherePK(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WherePK", reflect.TypeOf((*MockDelete)(nil).WherePK), cols...)
}

// With mocks base method.
func (m *MockDelete) With(name string, query schema.QueryAppender) orm.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", name, query)
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockDeleteMockRecorder) With(name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockDelete)(nil).With), name, query)
}

// MockRaw is a mock of Raw interface.
type MockRaw struct {
	ctrl     *gomock.Controller
	recorder *MockRawMockRecorder
}

// MockRawMockRecorder is the mock recorder for MockRaw.
type MockRawMockRecorder struct {
	mock *MockRaw
}

// NewMockRaw creates a new mock instance.
func NewMockRaw(ctrl *gomock.Controller) *MockRaw {
	mock := &MockRaw{ctrl: ctrl}
	mock.recorder = &MockRawMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaw) EXPECT() *MockRawMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockRaw) Exec(ctx context.Context, dest ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockRawMockRecorder) Exec(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRaw)(nil).Exec), varargs...)
}

// Scan mocks base method.
func (m *MockRaw) Scan(ctx context.Context, dest ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRawMockRecorder) Scan(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRaw)(nil).Scan), varargs...)
}

// MockCreateTable is a mock of CreateTable interface.
type MockCreateTable struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTableMockRecorder
}

// MockCreateTableMockRecorder is the mock recorder for MockCreateTable.
type MockCreateTableMockRecorder struct {
	mock *MockCreateTable
}

// NewMockCreateTable creates a new mock instance.
func NewMockCreateTable(ctrl *gomock.Controller) *MockCreateTable {
	mock := &MockCreateTable{ctrl: ctrl}
	mock.recorder = &MockCreateTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTable) EXPECT() *MockCreateTableMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockCreateTable) Exec(ctx context.Context, dest ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockCreateTableMockRecorder) Exec(ctx interface{}, dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockCreateTable)(nil).Exec), varargs...)
}

// ForeignKey mocks base method.
func (m *MockCreateTable) ForeignKey(query string, args ...interface{}) orm.CreateTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForeignKey", varargs...)
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// ForeignKey indicates an expected call of ForeignKey.
func (mr *MockCreateTableMockRecorder) ForeignKey(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForeignKey", reflect.TypeOf((*MockCreateTable)(nil).ForeignKey), varargs...)
}

// IfNotExists mocks base method.
func (m *MockCreateTable) IfNotExists() orm.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfNotExists")
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// IfNotExists indicates an expected call of IfNotExists.
func (mr *MockCreateTableMockRecorder) IfNotExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfNotExists", reflect.TypeOf((*MockCreateTable)(nil).IfNotExists))
}

// Model mocks base method.
func (m *MockCreateTable) Model(model interface{}) orm.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", model)
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockCreateTableMockRecorder) Model(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockCreateTable)(nil).Model), model)
}

// ModelTableExpr mocks base method.
func (m *MockCreateTable) ModelTableExpr(query string, args ...interface{}) orm.CreateTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelTableExpr", varargs...)
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// ModelTableExpr indicates an expected call of ModelTableExpr.
func (mr *MockCreateTableMockRecorder) ModelTableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelTableExpr", reflect.TypeOf((*MockCreateTable)(nil).ModelTableExpr), varargs...)
}

// PartitionBy mocks base method.
func (m *MockCreateTable) PartitionBy(query string, args ...interface{}) orm.CreateTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartitionBy", varargs...)
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// PartitionBy indicates an expected call of PartitionBy.
func (mr *MockCreateTableMockRecorder) PartitionBy(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionBy", reflect.TypeOf((*MockCreateTable)(nil).PartitionBy), varargs...)
}

// Table mocks base method.
func (m *MockCreateTable) Table(tables ...string) orm.CreateTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tables {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockCreateTableMockRecorder) Table(tables ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockCreateTable)(nil).Table), tables...)
}

// TableExpr mocks base method.
func (m *MockCreateTable) TableExpr(query string, args ...interface{}) orm.CreateTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableExpr", varargs...)
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// TableExpr indicates an expected call of TableExpr.
func (mr *MockCreateTableMockRecorder) TableExpr(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableExpr", reflect.TypeOf((*MockCreateTable)(nil).TableExpr), varargs...)
}

// TableSpace mocks base method.
func (m *MockCreateTable) TableSpace(tablespace string) orm.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableSpace", tablespace)
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// TableSpace indicates an expected call of TableSpace.
func (mr *MockCreateTableMockRecorder) TableSpace(tablespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableSpace", reflect.TypeOf((*MockCreateTable)(nil).TableSpace), tablespace)
}

// Temp mocks base method.
func (m *MockCreateTable) Temp() orm.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Temp")
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// Temp indicates an expected call of Temp.
func (mr *MockCreateTableMockRecorder) Temp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Temp", reflect.TypeOf((*MockCreateTable)(nil).Temp))
}

// Varchar mocks base method.
func (m *MockCreateTable) Varchar(n int) orm.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Varchar", n)
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// Varchar indicates an expected call of Varchar.
func (mr *MockCreateTableMockRecorder) Varchar(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Varchar", reflect.TypeOf((*MockCreateTable)(nil).Varchar), n)
}

// WithForeignKeys mocks base method.
func (m *MockCreateTable) WithForeignKeys() orm.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithForeignKeys")
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// WithForeignKeys indicates an expected call of WithForeignKeys.
func (mr *MockCreateTableMockRecorder) WithForeignKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithForeignKeys", reflect.TypeOf((*MockCreateTable)(nil).WithForeignKeys))
}

// MockOrm is a mock of Orm interface.
type MockOrm struct {
	ctrl     *gomock.Controller
	recorder *MockOrmMockRecorder
}

// MockOrmMockRecorder is the mock recorder for MockOrm.
type MockOrmMockRecorder struct {
	mock *MockOrm
}

// NewMockOrm creates a new mock instance.
func NewMockOrm(ctrl *gomock.Controller) *MockOrm {
	mock := &MockOrm{ctrl: ctrl}
	mock.recorder = &MockOrmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrm) EXPECT() *MockOrmMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockOrm) Begin() (orm.Orm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(orm.Orm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockOrmMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockOrm)(nil).Begin))
}

// BeginTx mocks base method.
func (m *MockOrm) BeginTx(ctx context.Context, opts *sql.TxOptions) (orm.Orm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(orm.Orm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockOrmMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockOrm)(nil).BeginTx), ctx, opts)
}

// Commit mocks base method.
func (m *MockOrm) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockOrmMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockOrm)(nil).Commit))
}

// Exec mocks base method.
func (m *MockOrm) Exec(query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockOrmMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockOrm)(nil).Exec), varargs...)
}

// ExecContext mocks base method.
func (m *MockOrm) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockOrmMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockOrm)(nil).ExecContext), varargs...)
}

// NewCreateTable mocks base method.
func (m *MockOrm) NewCreateTable() orm.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateTable")
	ret0, _ := ret[0].(orm.CreateTable)
	return ret0
}

// NewCreateTable indicates an expected call of NewCreateTable.
func (mr *MockOrmMockRecorder) NewCreateTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateTable", reflect.TypeOf((*MockOrm)(nil).NewCreateTable))
}

// NewDelete mocks base method.
func (m *MockOrm) NewDelete() orm.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDelete")
	ret0, _ := ret[0].(orm.Delete)
	return ret0
}

// NewDelete indicates an expected call of NewDelete.
func (mr *MockOrmMockRecorder) NewDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDelete", reflect.TypeOf((*MockOrm)(nil).NewDelete))
}

// NewInsert mocks base method.
func (m *MockOrm) NewInsert() orm.Insert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInsert")
	ret0, _ := ret[0].(orm.Insert)
	return ret0
}

// NewInsert indicates an expected call of NewInsert.
func (mr *MockOrmMockRecorder) NewInsert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInsert", reflect.TypeOf((*MockOrm)(nil).NewInsert))
}

// NewRaw mocks base method.
func (m *MockOrm) NewRaw(query string, args ...interface{}) orm.Raw {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRaw", varargs...)
	ret0, _ := ret[0].(orm.Raw)
	return ret0
}

// NewRaw indicates an expected call of NewRaw.
func (mr *MockOrmMockRecorder) NewRaw(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRaw", reflect.TypeOf((*MockOrm)(nil).NewRaw), varargs...)
}

// NewSelect mocks base method.
func (m *MockOrm) NewSelect() orm.Select {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSelect")
	ret0, _ := ret[0].(orm.Select)
	return ret0
}

// NewSelect indicates an expected call of NewSelect.
func (mr *MockOrmMockRecorder) NewSelect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSelect", reflect.TypeOf((*MockOrm)(nil).NewSelect))
}

// NewUpdate mocks base method.
func (m *MockOrm) NewUpdate() orm.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdate")
	ret0, _ := ret[0].(orm.Update)
	return ret0
}

// NewUpdate indicates an expected call of NewUpdate.
func (mr *MockOrmMockRecorder) NewUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdate", reflect.TypeOf((*MockOrm)(nil).NewUpdate))
}

// NewValues mocks base method.
func (m *MockOrm) NewValues(model interface{}) orm.Values {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewValues", model)
	ret0, _ := ret[0].(orm.Values)
	return ret0
}

// NewValues indicates an expected call of NewValues.
func (mr *MockOrmMockRecorder) NewValues(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewValues", reflect.TypeOf((*MockOrm)(nil).NewValues), model)
}

// Ping mocks base method.
func (m *MockOrm) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockOrmMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockOrm)(nil).Ping))
}

// PingContext mocks base method.
func (m *MockOrm) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockOrmMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockOrm)(nil).PingContext), ctx)
}

// Rollback mocks base method.
func (m *MockOrm) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockOrmMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockOrm)(nil).Rollback))
}

// RunInTx mocks base method.
func (m *MockOrm) RunInTx(ctx context.Context, opts *sql.TxOptions, fn func(context.Context, orm.Orm) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, opts, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MockOrmMockRecorder) RunInTx(ctx, opts, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*MockOrm)(nil).RunInTx), ctx, opts, fn)
}
