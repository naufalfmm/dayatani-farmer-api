// Code generated by MockGen. DO NOT EDIT.
// Source: hashing.go

// Package mockHashing is a generated GoMock package.
package mockHashing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHashing is a mock of Hashing interface.
type MockHashing struct {
	ctrl     *gomock.Controller
	recorder *MockHashingMockRecorder
}

// MockHashingMockRecorder is the mock recorder for MockHashing.
type MockHashingMockRecorder struct {
	mock *MockHashing
}

// NewMockHashing creates a new mock instance.
func NewMockHashing(ctrl *gomock.Controller) *MockHashing {
	mock := &MockHashing{ctrl: ctrl}
	mock.recorder = &MockHashingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashing) EXPECT() *MockHashingMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHashing) Check(hashed, raw string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", hashed, raw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockHashingMockRecorder) Check(hashed, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHashing)(nil).Check), hashed, raw)
}

// Generate mocks base method.
func (m *MockHashing) Generate(raw string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", raw)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockHashingMockRecorder) Generate(raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockHashing)(nil).Generate), raw)
}
